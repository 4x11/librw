const char *header_vert_src =
"#version 330\n"

"layout(std140) uniform State\n"
"{\n"
"	int   u_alphaTest;\n"
"	float u_alphaRef;\n"

"	float u_fogStart;\n"
"	float u_fogEnd;\n"
"	float u_fogRange;\n"
"	float u_fogDisable;\n"
"	vec4  u_fogColor;\n"
"};\n"

"layout(std140) uniform Scene\n"
"{\n"
"	mat4 u_proj;\n"
"	mat4 u_view;\n"
"};\n"

"#define MAX_LIGHTS 8\n"
"struct Light {\n"
"	float enabled;\n"
"	float radius;\n"
"	float minusCosAngle;\n"
"	float hardSpot;\n"
"	vec4  position;\n"
"	vec4  direction;\n"
"	vec4  color;\n"
"};\n"

"layout(std140) uniform Object\n"
"{\n"
"	mat4  u_world;\n"
"	vec4  u_ambLight;\n"
"	Light u_directLights[MAX_LIGHTS];\n"
"	Light u_pointLights[MAX_LIGHTS];\n"
"	Light u_spotLights[MAX_LIGHTS];\n"
"};\n"

"uniform vec4 u_matColor;\n"
"uniform vec4 u_surfProps;	// amb, spec, diff, extra\n"

"#define surfAmbient (u_surfProps.x)\n"
"#define surfSpecular (u_surfProps.y)\n"
"#define surfDiffuse (u_surfProps.z)\n"

"vec3 DoDirLight(Light L, vec3 N)\n"
"{\n"
"	float l = max(0.0, dot(N, -L.direction.xyz));\n"
"	return l*L.color.rgb;\n"
"}\n"

"vec3 DoPointLight(Light L, vec3 V, vec3 N)\n"
"{\n"
"	// As on PS2\n"
"	vec3 dir = V - L.position.xyz;\n"
"	float dist = length(dir);\n"
"	float atten = max(0.0, (1.0 - dist/L.radius));\n"
"	float l = max(0.0, dot(N, -normalize(dir)));\n"
"	return l*L.color.rgb*atten;\n"
"}\n"

"vec3 DoSpotLight(Light L, vec3 V, vec3 N)\n"
"{\n"
"	// As on PS2\n"
"	vec3 dir = V - L.position.xyz;\n"
"	float dist = length(dir);\n"
"	float atten = max(0.0, (1.0 - dist/L.radius));\n"
"	dir /= dist;\n"
"	float l = max(0.0, dot(N, -dir));\n"
"	float pcos = dot(dir, L.direction.xyz);	// cos to point\n"
"	float ccos = -L.minusCosAngle;\n"
"	float falloff = (pcos-ccos)/(1.0-ccos);\n"
"	if(falloff < 0)	// outside of cone\n"
"		l = 0;\n"
"	l *= max(falloff, L.hardSpot);\n"
"	return l*L.color.xyz*atten;\n"
"}\n"

"float DoFog(float w)\n"
"{\n"
"	return clamp((w - u_fogEnd)*u_fogRange, u_fogDisable, 1.0);\n"
"}\n"

"#define DIRECTIONALS\n"
"#define POINTLIGHTS\n"
"#define SPOTLIGHTS\n";
